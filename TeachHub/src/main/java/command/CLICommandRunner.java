package command;

import java.awt.TrayIcon.MessageType;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;

import com.jcabi.github.Coordinates;
import com.jcabi.github.Github;
import com.jcabi.github.Repo;
import com.jcabi.github.Repos;
import com.jcabi.github.Repos.RepoCreate;

import data_structures.Que;
import notification.Alert;

public class CLICommandRunner {
	private Github github;
	private Repos repos;
	private String defaultMessege = "this repository was generated by TeachHub, an abstraction of the GitHub api. Written by Shalom Gottesman";
	private String defaultTestMessege = "this is a repository generated as a test of TeachHub";
	private boolean useTestMessege;
	private String username;
	
	/**
	 * 
	 * @param github already authenticated github object
	 * @param testing true for the repository init message (found in the ReadMe.md file) should be the testing message. false for default
	 * @param userName the username of the current user
	 */
	public CLICommandRunner(Github github, boolean testing, String userName) {
		this.github = github;
		this.repos = github.repos();
		this.useTestMessege = testing;
		this.username = userName;
	}
	
	/**
	 * 
	 * @param que the que of commands to be executed. Calls CommandRunner.executeSingle on each one
	 * @throws IOException 
	 */
	public void executeStack(Que<ExecuteCommand> que) throws IOException {
		while (que.size() != 0) {
			ExecuteCommand cmd = que.deque();
			executeSingle(cmd);
		}
	}
	
	public void executeSingle(ExecuteCommand cmd) throws IOException {
		this.repos = this.github.repos();
		String initMsg = "";
		if (this.useTestMessege) {
			initMsg = this.defaultTestMessege;
		} else {
			initMsg = this.defaultMessege;
		}
		
		String repoName = cmd.getRepoName();
		
		if (cmd.isCreateRepo()) {
			boolean makePrivate = cmd.isMakeRepoPrivate();
			RepoCreate createRepo = new RepoCreate(repoName, makePrivate)
					.withDescription(initMsg)
					.withAutoInit(true);
			this.repos.create(createRepo);
		}
		
		Coordinates coords = new Coordinates.Simple(this.username, repoName);
		Repo repo = repos.get(coords);
		for (String collabToAdd : cmd.getAddColabs()) {
			if (!repo.collaborators().isCollaborator(collabToAdd)) {
				repo.collaborators().add(collabToAdd);
			}
		}
		for (String collabToRemove : cmd.getRemoveColabs()) {
			if (repo.collaborators().isCollaborator(collabToRemove)) {
				repo.collaborators().remove(collabToRemove);
			}
		}
		
		if (cmd.isDeleteRepo()) {
			boolean verify = verifyDelete(this.username, repoName);
			if (verify) {
				repos.remove(coords);
			} else {
				System.out.println("deletion verification returned false, not deleting this repo!");
			}
		}
		
		if (cmd.isCloneRepo()) {
			File cloneLocation = cmd.getCloneLocation();
			String cloneUrl = repoURLAbstractor(cmd.getUser(), cmd.getRepoName());
			try {
				Git.cloneRepository().setURI(cloneUrl).setDirectory(cloneLocation).call();
			} catch (GitAPIException e) {
				Alert alert = new Alert(MessageType.ERROR);
				alert.setMessege("TeachHub", "couldn't clone repository [" + cmd.getRepoName() + "] to desired location, skipping feature");
				alert.execute();
				e.printStackTrace();
			}	
		}
	}
	
	private String repoURLAbstractor(String ownerName, String repoName) {
		return "https://github.com/" + ownerName + "/" + repoName + ".git";
	}
	
	
	private boolean verifyDelete(String userName, String repoName) {
		String completeRepoName = userName + "/" + repoName;
		Scanner sc = new Scanner(System.in);
		System.out.println("trying to delete repository [" + completeRepoName + "]. This CANNOT be undone! Are you sure you want to do this? [Yes/No]");
		String str = sc.next();
		if (str.toLowerCase().equals("yes")) {
			System.out.println("then please type the name of the repository (no need to say JohnDoe/ThisRepo, just ThisRepo is fine)");
			System.out.println("or type \"cancel\" to cancel his request");
			String str2 = sc.next();
			if (str2.equals(repoName)) {
				System.out.println("ok then, here we go, deleteing " + completeRepoName);
				sc.close();
				return true;
			} else if (str.toLowerCase().equals("cancel")){
				System.out.println("ok, canceling this request");
				sc.close();
				return false;
			} else {
				System.out.println("that was not a valid response, please either type in the correct repository name (case specific!) or cancel. Lets try this again");
				sc.close();
				return verifyDelete(userName, repoName);
			}
		} else if (str.toLowerCase().equals("no")){
			System.out.println("ok, I will not delete this Repo then");
			sc.close();
			return false;
		} else {
			System.out.println("That was not a recognized response, valid responses are: \"Yes\" and \"No\", lets try this again");
			sc.close();
			return verifyDelete(userName, repoName);
		}
	}
}
